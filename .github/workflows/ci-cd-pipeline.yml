name: CI/CD Pipeline

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  # Job for building and testing
  build-test:
    name: 🚀 Build and Test
    runs-on: ubuntu-latest

    steps:
      # 1. Checkout code
      - name: 🔄 Checkout Code
        uses: actions/checkout@v3

      # 2. Cache Maven dependencies
      - name: 🗂️ Cache Maven Dependencies
        uses: actions/cache@v3
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-

      # 3. Set up JDK 17
      - name: ☕ Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: 17
          distribution: temurin
          cache: maven

      # 4. Build the project with Maven
      - name: 🛠️ Build Project
        run: mvn clean compile

      # 5. Run Unit Tests
      - name: 🧪 Run Unit Tests
        run: mvn test

      # 6. SonarCloud Analysis (without Jacoco)
      - name: 🦑 SonarCloud Analysis
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: |
          mvn sonar:sonar \
            -Dsonar.host.url=https://sonarcloud.io \
            -Dsonar.projectKey=HajjiRoua_ci-cd-pipeline-project \
            -Dsonar.organization=hajjiroua \
            -Dsonar.login=${{ secrets.SONAR_TOKEN }} \
            -Dsonar.java.binaries=target/

  # Job for Docker build and push
  docker-build-push:
    name: 🐳 Build and Push Docker Image
    runs-on: ubuntu-latest
    needs: build-test

    steps:
      # 1. Checkout code
      - name: 🔄 Checkout Code
        uses: actions/checkout@v3

      # 2. Log in to Docker Hub
      - name: 🔑 Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      # 3. Build Docker Image
      - name: 🏗️ Build Docker Image
        run: |
          docker build \
            --label "org.opencontainers.image.title=CI/CD Pipeline App" \
            --label "org.opencontainers.image.version=latest" \
            -t ${{ secrets.DOCKER_USERNAME }}/ci-cd-pipeline-app:latest .

      # 4. Scan Docker Image with Trivy
      - name: 🔍 Scan Docker Image with Trivy
        uses: aquasecurity/trivy-action@0.28.0
        with:
          image-ref: ${{ secrets.DOCKER_USERNAME }}/ci-cd-pipeline-app:latest
          severity: CRITICAL,HIGH
          format: table

      # 5. Push Docker Image
      - name: 🚚 Push Docker Image
        if: success()
        run: docker push ${{ secrets.DOCKER_USERNAME }}/ci-cd-pipeline-app:latest