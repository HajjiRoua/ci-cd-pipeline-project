name: CI/CD Pipeline

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build-test:
    name: Build and Test
    runs-on: ubuntu-latest

    steps:
      # 1. Checkout code
      - name: Checkout code
        uses: actions/checkout@v3

      # 2. Cache Maven dependencies
      - name: Cache Maven dependencies
        uses: actions/cache@v3
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-

      # 3. Set up JDK 17
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: 17
          distribution: 'temurin' # OpenJDK distribution
          cache: maven

      # 4. Build the project with Maven
      - name: Build with Maven
        run: mvn clean compile

      # 5. Run Unit Tests
      - name: Run Unit Tests
        run: mvn test

      # 6. SonarQube Analysis
      - name: SonarQube Analysis
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: mvn sonar:sonar -Dsonar.host.url=https://sonarcloud.io -Dsonar.projectKey=HajjiRoua_ci-cd-pipeline-project -Dsonar.organization=hajjiroua -Dsonar.login=${{ secrets.SONAR_TOKEN }}

  docker-build-push:
    name: Build and Push Docker Image
    runs-on: ubuntu-latest
    needs: build-test

    steps:
      # 1. Checkout code
      - name: Checkout code
        uses: actions/checkout@v3

      # 2. Log in to Docker Hub
      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      # 3. Build Docker Image
      - name: Build Docker Image
        run: |
          docker build \
            --label "org.opencontainers.image.title=CI/CD Pipeline App" \
            --label "org.opencontainers.image.version=latest" \
            -t your-dockerhub-username/ci-cd-pipeline-app:latest .

      # 4. Scan Docker Image with Trivy
      - name: Scan Docker Image with Trivy
        uses: aquasecurity/trivy-action@v0.11.0
        with:
          image-ref: your-dockerhub-username/ci-cd-pipeline-app:latest
          severity: CRITICAL,HIGH
          format: table


      # 5. Push Docker Image
      - name: Push Docker Image
        if: success() # Only push if Trivy scan is successful
        run: docker push your-dockerhub-username/ci-cd-pipeline-app:latest